(()=>{"use strict";var n={602:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,"/*! modern-normalize v1.1.0 | MIT License | https://github.com/sindresorhus/modern-normalize */\n\n/*\nDocument\n========\n*/\n\n/**\nUse a better box model (opinionated).\n*/\n\n*,\n::before,\n::after {\n\tbox-sizing: border-box;\n}\n\n/**\nUse a more readable tab size (opinionated).\n*/\n\nhtml {\n\t-moz-tab-size: 4;\n\ttab-size: 4;\n}\n\n/**\n1. Correct the line height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n*/\n\nhtml {\n\tline-height: 1.15; /* 1 */\n\t-webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/*\nSections\n========\n*/\n\n/**\nRemove the margin in all browsers.\n*/\n\nbody {\n\tmargin: 0;\n}\n\n/**\nImprove consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n*/\n\nbody {\n\tfont-family:\n\t\tsystem-ui,\n\t\t-apple-system, /* Firefox supports this but not yet `system-ui` */\n\t\t'Segoe UI',\n\t\tRoboto,\n\t\tHelvetica,\n\t\tArial,\n\t\tsans-serif,\n\t\t'Apple Color Emoji',\n\t\t'Segoe UI Emoji';\n}\n\n/*\nGrouping content\n================\n*/\n\n/**\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n*/\n\nhr {\n\theight: 0; /* 1 */\n\tcolor: inherit; /* 2 */\n}\n\n/*\nText-level semantics\n====================\n*/\n\n/**\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr[title] {\n\ttext-decoration: underline dotted;\n}\n\n/**\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n\tfont-weight: bolder;\n}\n\n/**\n1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n2. Correct the odd 'em' font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n\tfont-family:\n\t\tui-monospace,\n\t\tSFMono-Regular,\n\t\tConsolas,\n\t\t'Liberation Mono',\n\t\tMenlo,\n\t\tmonospace; /* 1 */\n\tfont-size: 1em; /* 2 */\n}\n\n/**\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n\tfont-size: 80%;\n}\n\n/**\nPrevent 'sub' and 'sup' elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n\tfont-size: 75%;\n\tline-height: 0;\n\tposition: relative;\n\tvertical-align: baseline;\n}\n\nsub {\n\tbottom: -0.25em;\n}\n\nsup {\n\ttop: -0.5em;\n}\n\n/*\nTabular data\n============\n*/\n\n/**\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n*/\n\ntable {\n\ttext-indent: 0; /* 1 */\n\tborder-color: inherit; /* 2 */\n}\n\n/*\nForms\n=====\n*/\n\n/**\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n\tfont-family: inherit; /* 1 */\n\tfont-size: 100%; /* 1 */\n\tline-height: 1.15; /* 1 */\n\tmargin: 0; /* 2 */\n}\n\n/**\nRemove the inheritance of text transform in Edge and Firefox.\n1. Remove the inheritance of text transform in Firefox.\n*/\n\nbutton,\nselect { /* 1 */\n\ttext-transform: none;\n}\n\n/**\nCorrect the inability to style clickable types in iOS and Safari.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n\t-webkit-appearance: button;\n}\n\n/**\nRemove the inner border and padding in Firefox.\n*/\n\n::-moz-focus-inner {\n\tborder-style: none;\n\tpadding: 0;\n}\n\n/**\nRestore the focus styles unset by the previous rule.\n*/\n\n:-moz-focusring {\n\toutline: 1px dotted ButtonText;\n}\n\n/**\nRemove the additional ':invalid' styles in Firefox.\nSee: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737\n*/\n\n:-moz-ui-invalid {\n\tbox-shadow: none;\n}\n\n/**\nRemove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.\n*/\n\nlegend {\n\tpadding: 0;\n}\n\n/**\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n\tvertical-align: baseline;\n}\n\n/**\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n\theight: auto;\n}\n\n/**\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n\t-webkit-appearance: textfield; /* 1 */\n\toutline-offset: -2px; /* 2 */\n}\n\n/**\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n\t-webkit-appearance: none;\n}\n\n/**\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to 'inherit' in Safari.\n*/\n\n::-webkit-file-upload-button {\n\t-webkit-appearance: button; /* 1 */\n\tfont: inherit; /* 2 */\n}\n\n/*\nInteractive\n===========\n*/\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n\tdisplay: list-item;\n}\n","",{version:3,sources:["webpack://./node_modules/modern-normalize/modern-normalize.css"],names:[],mappings:"AAAA,8FAA8F;;AAE9F;;;CAGC;;AAED;;CAEC;;AAED;;;CAGC,sBAAsB;AACvB;;AAEA;;CAEC;;AAED;CACC,gBAAgB;CAChB,WAAW;AACZ;;AAEA;;;CAGC;;AAED;CACC,iBAAiB,EAAE,MAAM;CACzB,8BAA8B,EAAE,MAAM;AACvC;;AAEA;;;CAGC;;AAED;;CAEC;;AAED;CACC,SAAS;AACV;;AAEA;;CAEC;;AAED;CACC;;;;;;;;;kBASiB;AAClB;;AAEA;;;CAGC;;AAED;;;CAGC;;AAED;CACC,SAAS,EAAE,MAAM;CACjB,cAAc,EAAE,MAAM;AACvB;;AAEA;;;CAGC;;AAED;;CAEC;;AAED;CACC,iCAAiC;AAClC;;AAEA;;CAEC;;AAED;;CAEC,mBAAmB;AACpB;;AAEA;;;CAGC;;AAED;;;;CAIC;;;;;;WAMU,EAAE,MAAM;CAClB,cAAc,EAAE,MAAM;AACvB;;AAEA;;CAEC;;AAED;CACC,cAAc;AACf;;AAEA;;CAEC;;AAED;;CAEC,cAAc;CACd,cAAc;CACd,kBAAkB;CAClB,wBAAwB;AACzB;;AAEA;CACC,eAAe;AAChB;;AAEA;CACC,WAAW;AACZ;;AAEA;;;CAGC;;AAED;;;CAGC;;AAED;CACC,cAAc,EAAE,MAAM;CACtB,qBAAqB,EAAE,MAAM;AAC9B;;AAEA;;;CAGC;;AAED;;;CAGC;;AAED;;;;;CAKC,oBAAoB,EAAE,MAAM;CAC5B,eAAe,EAAE,MAAM;CACvB,iBAAiB,EAAE,MAAM;CACzB,SAAS,EAAE,MAAM;AAClB;;AAEA;;;CAGC;;AAED;SACS,MAAM;CACd,oBAAoB;AACrB;;AAEA;;CAEC;;AAED;;;;CAIC,0BAA0B;AAC3B;;AAEA;;CAEC;;AAED;CACC,kBAAkB;CAClB,UAAU;AACX;;AAEA;;CAEC;;AAED;CACC,8BAA8B;AAC/B;;AAEA;;;CAGC;;AAED;CACC,gBAAgB;AACjB;;AAEA;;CAEC;;AAED;CACC,UAAU;AACX;;AAEA;;CAEC;;AAED;CACC,wBAAwB;AACzB;;AAEA;;CAEC;;AAED;;CAEC,YAAY;AACb;;AAEA;;;CAGC;;AAED;CACC,6BAA6B,EAAE,MAAM;CACrC,oBAAoB,EAAE,MAAM;AAC7B;;AAEA;;CAEC;;AAED;CACC,wBAAwB;AACzB;;AAEA;;;CAGC;;AAED;CACC,0BAA0B,EAAE,MAAM;CAClC,aAAa,EAAE,MAAM;AACtB;;AAEA;;;CAGC;;AAED;;CAEC;;AAED;CACC,kBAAkB;AACnB",sourcesContent:["/*! modern-normalize v1.1.0 | MIT License | https://github.com/sindresorhus/modern-normalize */\n\n/*\nDocument\n========\n*/\n\n/**\nUse a better box model (opinionated).\n*/\n\n*,\n::before,\n::after {\n\tbox-sizing: border-box;\n}\n\n/**\nUse a more readable tab size (opinionated).\n*/\n\nhtml {\n\t-moz-tab-size: 4;\n\ttab-size: 4;\n}\n\n/**\n1. Correct the line height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n*/\n\nhtml {\n\tline-height: 1.15; /* 1 */\n\t-webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/*\nSections\n========\n*/\n\n/**\nRemove the margin in all browsers.\n*/\n\nbody {\n\tmargin: 0;\n}\n\n/**\nImprove consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n*/\n\nbody {\n\tfont-family:\n\t\tsystem-ui,\n\t\t-apple-system, /* Firefox supports this but not yet `system-ui` */\n\t\t'Segoe UI',\n\t\tRoboto,\n\t\tHelvetica,\n\t\tArial,\n\t\tsans-serif,\n\t\t'Apple Color Emoji',\n\t\t'Segoe UI Emoji';\n}\n\n/*\nGrouping content\n================\n*/\n\n/**\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n*/\n\nhr {\n\theight: 0; /* 1 */\n\tcolor: inherit; /* 2 */\n}\n\n/*\nText-level semantics\n====================\n*/\n\n/**\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr[title] {\n\ttext-decoration: underline dotted;\n}\n\n/**\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n\tfont-weight: bolder;\n}\n\n/**\n1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n2. Correct the odd 'em' font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n\tfont-family:\n\t\tui-monospace,\n\t\tSFMono-Regular,\n\t\tConsolas,\n\t\t'Liberation Mono',\n\t\tMenlo,\n\t\tmonospace; /* 1 */\n\tfont-size: 1em; /* 2 */\n}\n\n/**\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n\tfont-size: 80%;\n}\n\n/**\nPrevent 'sub' and 'sup' elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n\tfont-size: 75%;\n\tline-height: 0;\n\tposition: relative;\n\tvertical-align: baseline;\n}\n\nsub {\n\tbottom: -0.25em;\n}\n\nsup {\n\ttop: -0.5em;\n}\n\n/*\nTabular data\n============\n*/\n\n/**\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n*/\n\ntable {\n\ttext-indent: 0; /* 1 */\n\tborder-color: inherit; /* 2 */\n}\n\n/*\nForms\n=====\n*/\n\n/**\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n\tfont-family: inherit; /* 1 */\n\tfont-size: 100%; /* 1 */\n\tline-height: 1.15; /* 1 */\n\tmargin: 0; /* 2 */\n}\n\n/**\nRemove the inheritance of text transform in Edge and Firefox.\n1. Remove the inheritance of text transform in Firefox.\n*/\n\nbutton,\nselect { /* 1 */\n\ttext-transform: none;\n}\n\n/**\nCorrect the inability to style clickable types in iOS and Safari.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n\t-webkit-appearance: button;\n}\n\n/**\nRemove the inner border and padding in Firefox.\n*/\n\n::-moz-focus-inner {\n\tborder-style: none;\n\tpadding: 0;\n}\n\n/**\nRestore the focus styles unset by the previous rule.\n*/\n\n:-moz-focusring {\n\toutline: 1px dotted ButtonText;\n}\n\n/**\nRemove the additional ':invalid' styles in Firefox.\nSee: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737\n*/\n\n:-moz-ui-invalid {\n\tbox-shadow: none;\n}\n\n/**\nRemove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.\n*/\n\nlegend {\n\tpadding: 0;\n}\n\n/**\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n\tvertical-align: baseline;\n}\n\n/**\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n\theight: auto;\n}\n\n/**\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n\t-webkit-appearance: textfield; /* 1 */\n\toutline-offset: -2px; /* 2 */\n}\n\n/**\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n\t-webkit-appearance: none;\n}\n\n/**\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to 'inherit' in Safari.\n*/\n\n::-webkit-file-upload-button {\n\t-webkit-appearance: button; /* 1 */\n\tfont: inherit; /* 2 */\n}\n\n/*\nInteractive\n===========\n*/\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n\tdisplay: list-item;\n}\n"],sourceRoot:""}]);const s=i},907:(n,e,t)=>{t.d(e,{Z:()=>g});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),s=t(667),c=t.n(s),d=new URL(t(217),t.b),u=new URL(t(44),t.b),l=new URL(t(717),t.b),A=i()(a()),m=c()(d),f=c()(u),h=c()(l);A.push([n.id,'html {\n    height: 100%;\n}\n\nbody {\n    min-height: 100%;\n\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: auto 1fr auto;\n    grid-template-areas: "sidebar header"\n                         "sidebar content"\n                         "footer footer";\n\n    --dark-gray: #111827;\n    --light-gray: #F9FAFB;\n    --dark-cyan: #164E63;\n    --light-blue: #DBEAFE;\n    --red: #DC2626;\n}\n\n/* Icons */\n\n.icon {\n    display: inline-block;\n    background-repeat: no-repeat;\n    background-size: contain;\n    width: 32px;\n    height: 32px;\n    cursor: pointer;\n}\n\n.delete.icon {\n    background-image: url('+m+");\n}\n\n.edit.icon {\n    background-image: url("+f+');\n}\n\n.hidden {\n    display: none;\n}\n\n/* Header */\n\n.header {\n    grid-area: header;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n    justify-content: center;\n\n    background-color:  var(--light-blue);\n    padding: 10px 0;\n}\n\n.header > .project-header {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n}\n\n.header > .project-header > h1 {\n    font-size: 2.5rem;\n    margin: 0 5px 0 0;\n}\n\n.header > .project-header > p {\n    margin: 5px 0 0 0;\n}\n\n.header > button.add-task.add-btn {\n    font-size: 1.8rem;\n    margin-right: 30px;\n}\n\n/* Sidebar */\n\n.sidebar {\n    grid-area: sidebar;\n    background-color:  var(--dark-cyan);\n    color: var(--light-gray);\n    padding: 0 10%;\n}\n\n.sidebar h1 {\n    font-size: 1.8rem;\n}\n\n.sidebar h2 {\n    font-size: 1.6rem;\n}\n\n.sidebar p {\n    font-size: 1.1rem;\n    padding-left: 15px;\n}\n\n.sidebar button.add-project,\n.header button.add-task {\n    font-size: 1.5rem;\n    background: #FEE2E2;\n    color: var(--red);\n    border: none;\n    border-radius: 5px;\n    padding: 10px 20px;\n}\n\n/* Content */\n\n.content {\n    grid-area: content;\n}\n\n.content > .tasks-section {\n\n}\n\n.tasks-section > .task {\n    display: grid;\n    grid-template-columns: 1fr auto auto;\n    grid-template-rows: 1fr auto;\n    grid-template-areas: "title checkbox checkbox"\n                         "expand edit delete";\n}\n\n.task > h3 {\n    grid-area: title;\n}\n\n.task > input {\n    grid-area: checkbox;\n}\n\n.task > p {\n\n}\n\n.task > p.expand {\n    grid-area: expand;\n}\n\n.task > p.edit {\n    grid-area: edit;\n}\n\n.task > p.delete {\n    grid-area: delete;\n}\n\n/* Footer */\n\n.footer {\n    grid-area: footer;\n\n    background-color:  var(--dark-cyan);\n    color: var(--light-gray);\n}\n\n.footer > p {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    column-gap: 5px;\n    margin: 5px 0;\n    font-size: 1rem;\n}\n\n.footer .github-icon {\n    background-image: url('+h+");\n}\n\n/* Forms */\n\n.task-form,\n.project-form {\n    position: fixed;\n    left: 50%;\n    top:  50%;\n    transform: translate(-50%, -50%);\n\n    background-color:  var(--dark-cyan);\n    color: var(--light-gray);\n    border: 5px solid var(--dark-gray);\n    border-radius: 10px;\n}\n\n.task-form > h2,\n.project-form > h2 {\n    font-size: 2rem;\n    text-align: center;\n    margin-bottom: 10px;\n}\n\n.task-form > form,\n.project-form > form {\n    display: flex;\n    flex-direction: column;\n    padding: 0 20px 10px 20px;\n}\n\nform > p > label {\n    width: 120px;\n    display: inline-block;\n    font-size: 1.4rem;\n}\n\nform > p > input,\nform > p > select {\n    width: 63%;\n}\n\nform > .buttons {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n}\n\nform > .buttons button {\n    font-size: 1.4rem;\n    border: none;\n    border-radius: 5px;\n    padding: 5px 10px;\n    background: var(--light-blue);\n    color: var(--dark-gray);\n}","",{version:3,sources:["webpack://./src/index-style.css"],names:[],mappings:"AAAA;IACI,YAAY;AAChB;;AAEA;IACI,gBAAgB;;IAEhB,aAAa;IACb,8BAA8B;IAC9B,iCAAiC;IACjC;;wCAEoC;;IAEpC,oBAAoB;IACpB,qBAAqB;IACrB,oBAAoB;IACpB,qBAAqB;IACrB,cAAc;AAClB;;AAEA,UAAU;;AAEV;IACI,qBAAqB;IACrB,4BAA4B;IAC5B,wBAAwB;IACxB,WAAW;IACX,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,yDAA4C;AAChD;;AAEA;IACI,yDAA0C;AAC9C;;AAEA;IACI,aAAa;AACjB;;AAEA,WAAW;;AAEX;IACI,iBAAiB;IACjB,aAAa;IACb,+BAA+B;IAC/B,mBAAmB;IACnB,uBAAuB;;IAEvB,oCAAoC;IACpC,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA,YAAY;;AAEZ;IACI,kBAAkB;IAClB,mCAAmC;IACnC,wBAAwB;IACxB,cAAc;AAClB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;;IAEI,iBAAiB;IACjB,mBAAmB;IACnB,iBAAiB;IACjB,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA,YAAY;;AAEZ;IACI,kBAAkB;AACtB;;AAEA;;AAEA;;AAEA;IACI,aAAa;IACb,oCAAoC;IACpC,4BAA4B;IAC5B;6CACyC;AAC7C;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;;AAEA;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA,WAAW;;AAEX;IACI,iBAAiB;;IAEjB,mCAAmC;IACnC,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,yDAAiD;AACrD;;AAEA,UAAU;;AAEV;;IAEI,eAAe;IACf,SAAS;IACT,SAAS;IACT,gCAAgC;;IAEhC,mCAAmC;IACnC,wBAAwB;IACxB,kCAAkC;IAClC,mBAAmB;AACvB;;AAEA;;IAEI,eAAe;IACf,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;;IAEI,aAAa;IACb,sBAAsB;IACtB,yBAAyB;AAC7B;;AAEA;IACI,YAAY;IACZ,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;;IAEI,UAAU;AACd;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,6BAA6B;AACjC;;AAEA;IACI,iBAAiB;IACjB,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,6BAA6B;IAC7B,uBAAuB;AAC3B",sourcesContent:['html {\n    height: 100%;\n}\n\nbody {\n    min-height: 100%;\n\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: auto 1fr auto;\n    grid-template-areas: "sidebar header"\n                         "sidebar content"\n                         "footer footer";\n\n    --dark-gray: #111827;\n    --light-gray: #F9FAFB;\n    --dark-cyan: #164E63;\n    --light-blue: #DBEAFE;\n    --red: #DC2626;\n}\n\n/* Icons */\n\n.icon {\n    display: inline-block;\n    background-repeat: no-repeat;\n    background-size: contain;\n    width: 32px;\n    height: 32px;\n    cursor: pointer;\n}\n\n.delete.icon {\n    background-image: url("./assets/delete.svg");\n}\n\n.edit.icon {\n    background-image: url("./assets/edit.svg");\n}\n\n.hidden {\n    display: none;\n}\n\n/* Header */\n\n.header {\n    grid-area: header;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n    justify-content: center;\n\n    background-color:  var(--light-blue);\n    padding: 10px 0;\n}\n\n.header > .project-header {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n}\n\n.header > .project-header > h1 {\n    font-size: 2.5rem;\n    margin: 0 5px 0 0;\n}\n\n.header > .project-header > p {\n    margin: 5px 0 0 0;\n}\n\n.header > button.add-task.add-btn {\n    font-size: 1.8rem;\n    margin-right: 30px;\n}\n\n/* Sidebar */\n\n.sidebar {\n    grid-area: sidebar;\n    background-color:  var(--dark-cyan);\n    color: var(--light-gray);\n    padding: 0 10%;\n}\n\n.sidebar h1 {\n    font-size: 1.8rem;\n}\n\n.sidebar h2 {\n    font-size: 1.6rem;\n}\n\n.sidebar p {\n    font-size: 1.1rem;\n    padding-left: 15px;\n}\n\n.sidebar button.add-project,\n.header button.add-task {\n    font-size: 1.5rem;\n    background: #FEE2E2;\n    color: var(--red);\n    border: none;\n    border-radius: 5px;\n    padding: 10px 20px;\n}\n\n/* Content */\n\n.content {\n    grid-area: content;\n}\n\n.content > .tasks-section {\n\n}\n\n.tasks-section > .task {\n    display: grid;\n    grid-template-columns: 1fr auto auto;\n    grid-template-rows: 1fr auto;\n    grid-template-areas: "title checkbox checkbox"\n                         "expand edit delete";\n}\n\n.task > h3 {\n    grid-area: title;\n}\n\n.task > input {\n    grid-area: checkbox;\n}\n\n.task > p {\n\n}\n\n.task > p.expand {\n    grid-area: expand;\n}\n\n.task > p.edit {\n    grid-area: edit;\n}\n\n.task > p.delete {\n    grid-area: delete;\n}\n\n/* Footer */\n\n.footer {\n    grid-area: footer;\n\n    background-color:  var(--dark-cyan);\n    color: var(--light-gray);\n}\n\n.footer > p {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    column-gap: 5px;\n    margin: 5px 0;\n    font-size: 1rem;\n}\n\n.footer .github-icon {\n    background-image: url("./assets/github-32px.png");\n}\n\n/* Forms */\n\n.task-form,\n.project-form {\n    position: fixed;\n    left: 50%;\n    top:  50%;\n    transform: translate(-50%, -50%);\n\n    background-color:  var(--dark-cyan);\n    color: var(--light-gray);\n    border: 5px solid var(--dark-gray);\n    border-radius: 10px;\n}\n\n.task-form > h2,\n.project-form > h2 {\n    font-size: 2rem;\n    text-align: center;\n    margin-bottom: 10px;\n}\n\n.task-form > form,\n.project-form > form {\n    display: flex;\n    flex-direction: column;\n    padding: 0 20px 10px 20px;\n}\n\nform > p > label {\n    width: 120px;\n    display: inline-block;\n    font-size: 1.4rem;\n}\n\nform > p > input,\nform > p > select {\n    width: 63%;\n}\n\nform > .buttons {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n}\n\nform > .buttons button {\n    font-size: 1.4rem;\n    border: none;\n    border-radius: 5px;\n    padding: 5px 10px;\n    background: var(--light-blue);\n    color: var(--dark-gray);\n}'],sourceRoot:""}]);const g=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var u=[].concat(n[d]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),e.push(u))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],u=o[d]||0,l="".concat(d," ").concat(u);o[d]=u+1;var A=t(l),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var f=a(m,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var c=r(n,a),d=0;d<o.length;d++){var u=t(o[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},217:(n,e,t)=>{n.exports=t.p+"a53e22036f5f02bda3f2.svg"},44:(n,e,t)=>{n.exports=t.p+"9b527df04c00d16681c2.svg"},717:(n,e,t)=>{n.exports=t.p+"266ca63177bca6f330a7.png"}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),a=t.n(r),o=t(569),i=t.n(o),s=t(565),c=t.n(s),d=t(216),u=t.n(d),l=t(589),A=t.n(l),m=t(602),f={};f.styleTagTransform=A(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var h=t(907),g={};function p(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function C(n){return p(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function b(n){p(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function v(n){if(p(1,arguments),!C(n)&&"number"!=typeof n)return!1;var e=b(n);return!isNaN(Number(e))}g.styleTagTransform=A(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=u(),e()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var y={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function w(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const E={date:w({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:w({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:w({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var B={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function k(n){return function(e,t){var r,a=t||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,i=a.width?String(a.width):o;r=n.formattingValues[i]||n.formattingValues[o]}else{var s=n.defaultWidth,c=a.width?String(a.width):n.defaultWidth;r=n.values[c]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const x={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:k({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:k({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:k({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:k({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:k({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function T(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,s=o[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(c)?S(c,(function(n){return n.test(s)})):I(c,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(d):d,i=t.valueCallback?t.valueCallback(i):i;var u=e.slice(s.length);return{value:i,rest:u}}}function I(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function S(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var D,M={ordinalNumber:(D={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(D.matchPattern);if(!t)return null;var r=t[0],a=n.match(D.parsePattern);if(!a)return null;var o=D.valueCallback?D.valueCallback(a[0]):a[0];o=e.valueCallback?e.valueCallback(o):o;var i=n.slice(r.length);return{value:o,rest:i}}),era:T({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:T({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:T({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:T({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:T({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const j={code:"en-US",formatDistance:function(n,e,t){var r,a=y[n];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:E,formatRelative:function(n,e,t,r){return B[n]},localize:x,match:M,options:{weekStartsOn:0,firstWeekContainsDate:1}};function z(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function P(n,e){p(2,arguments);var t=b(n).getTime(),r=z(e);return new Date(t+r)}function U(n,e){p(2,arguments);var t=z(e);return P(n,-t)}var F=864e5;function L(n){p(1,arguments);var e=1,t=b(n),r=t.getUTCDay(),a=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function q(n){p(1,arguments);var e=b(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var a=L(r),o=new Date(0);o.setUTCFullYear(t,0,4),o.setUTCHours(0,0,0,0);var i=L(o);return e.getTime()>=a.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function N(n){p(1,arguments);var e=q(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=L(t);return r}var Y=6048e5;function W(n,e){p(1,arguments);var t=e||{},r=t.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:z(a),i=null==t.weekStartsOn?o:z(t.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=b(n),c=s.getUTCDay(),d=(c<i?7:0)+c-i;return s.setUTCDate(s.getUTCDate()-d),s.setUTCHours(0,0,0,0),s}function R(n,e){p(1,arguments);var t=b(n),r=t.getUTCFullYear(),a=e||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,s=null==i?1:z(i),c=null==a.firstWeekContainsDate?s:z(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(r+1,0,c),d.setUTCHours(0,0,0,0);var u=W(d,e),l=new Date(0);l.setUTCFullYear(r,0,c),l.setUTCHours(0,0,0,0);var A=W(l,e);return t.getTime()>=u.getTime()?r+1:t.getTime()>=A.getTime()?r:r-1}function O(n,e){p(1,arguments);var t=e||{},r=t.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:z(a),i=null==t.firstWeekContainsDate?o:z(t.firstWeekContainsDate),s=R(n,e),c=new Date(0);c.setUTCFullYear(s,0,i),c.setUTCHours(0,0,0,0);var d=W(c,e);return d}var H=6048e5;function G(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const X=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return G("yy"===e?r%100:r,e.length)},Z=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):G(t+1,2)},Q=function(n,e){return G(n.getUTCDate(),e.length)},_=function(n,e){return G(n.getUTCHours()%12||12,e.length)},V=function(n,e){return G(n.getUTCHours(),e.length)},J=function(n,e){return G(n.getUTCMinutes(),e.length)},$=function(n,e){return G(n.getUTCSeconds(),e.length)},K=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return G(Math.floor(r*Math.pow(10,t-3)),e.length)};var nn={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return X(n,e)},Y:function(n,e,t,r){var a=R(n,r),o=a>0?a:1-a;return"YY"===e?G(o%100,2):"Yo"===e?t.ordinalNumber(o,{unit:"year"}):G(o,e.length)},R:function(n,e){return G(q(n),e.length)},u:function(n,e){return G(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return G(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return G(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return Z(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return G(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var a=function(n,e){p(1,arguments);var t=b(n),r=W(t,e).getTime()-O(t,e).getTime();return Math.round(r/H)+1}(n,r);return"wo"===e?t.ordinalNumber(a,{unit:"week"}):G(a,e.length)},I:function(n,e,t){var r=function(n){p(1,arguments);var e=b(n),t=L(e).getTime()-N(e).getTime();return Math.round(t/Y)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):G(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):Q(n,e)},D:function(n,e,t){var r=function(n){p(1,arguments);var e=b(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),a=t-r;return Math.floor(a/F)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):G(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return G(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return G(o,e.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return G(a,e.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return _(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):V(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):G(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):G(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):J(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):$(n,e)},S:function(n,e){return K(n,e)},X:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return tn(a);case"XXXX":case"XX":return rn(a);default:return rn(a,":")}},x:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return tn(a);case"xxxx":case"xx":return rn(a);default:return rn(a,":")}},O:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+en(a,":");default:return"GMT"+rn(a,":")}},z:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+en(a,":");default:return"GMT"+rn(a,":")}},t:function(n,e,t,r){var a=r._originalDate||n;return G(Math.floor(a.getTime()/1e3),e.length)},T:function(n,e,t,r){return G((r._originalDate||n).getTime(),e.length)}};function en(n,e){var t=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),o=r%60;if(0===o)return t+String(a);var i=e||"";return t+String(a)+i+G(o,2)}function tn(n,e){return n%60==0?(n>0?"-":"+")+G(Math.abs(n)/60,2):rn(n,e)}function rn(n,e){var t=e||"",r=n>0?"-":"+",a=Math.abs(n);return r+G(Math.floor(a/60),2)+t+G(a%60,2)}const an=nn;function on(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function sn(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const cn={p:sn,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return on(n,e);switch(a){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",on(a,e)).replace("{{time}}",sn(o,e))}};function dn(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var un=["D","DD"],ln=["YY","YYYY"];function An(n){return-1!==un.indexOf(n)}function mn(n){return-1!==ln.indexOf(n)}function fn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var hn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,gn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,pn=/^'([^]*?)'?$/,Cn=/''/g,bn=/[a-zA-Z]/;function vn(n){return n.match(pn)[1].replace(Cn,"'")}const yn=(()=>{const n=document.querySelector(".task-form"),e=document.querySelector(".project-form"),t=document.querySelector(".task-form.edit-form"),r=document.querySelector(".project-form.edit-form"),a=t.querySelector("form"),o=r.querySelector("form"),i=document.querySelector(".add-task"),s=document.querySelector(".add-project"),c=document.querySelector(".project-names"),d=document.querySelector(".tasks-section"),u=(d.querySelector(".task > input"),document.querySelector(".project-header")),l=document.querySelector(".project-header > .edit"),A=document.querySelector(".project-header > .delete"),m=u.querySelector("h1"),f=()=>{i.addEventListener("click",h),s.addEventListener("click",(()=>g(e))),C()},h=()=>{c.childNodes.length>0&&g(n)},g=n=>{n.classList.contains("hidden")?n.classList.remove("hidden"):n.classList.add("hidden")},C=()=>{const n=document.querySelectorAll(".close-form-btn");for(const e of n)e.addEventListener("click",(()=>y(e)))},y=n=>{g(n.parentNode.parentNode.parentNode)},w=n=>{if(k(d),null!==n)for(const e of n.tasks){const n=E(e);d.appendChild(n)}},E=n=>{const e=document.createElement("article");e.classList.add("task");const t=document.createElement("h3");t.textContent=n.title;const r=document.createElement("input");r.type="checkbox",r.name="checked",r.addEventListener("change",B);const a=document.createElement("p");a.textContent="Expand",a.classList.add("expand");const o=document.createElement("p");o.classList.add("edit","icon");const i=document.createElement("p");return i.classList.add("delete","icon"),e.append(t,r,a,o,i),e},B=n=>{const e=n.target.parentNode;e.classList.contains("task-checked")?e.classList.remove("task-checked"):e.classList.add("task-checked")},k=n=>{for(;n.lastChild;)n.removeChild(n.lastChild)},x=n=>{const e=function(n,e,t){p(2,arguments);var r=String(e),a=t||{},o=a.locale||j,i=o.options&&o.options.firstWeekContainsDate,s=null==i?1:z(i),c=null==a.firstWeekContainsDate?s:z(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=o.options&&o.options.weekStartsOn,u=null==d?0:z(d),l=null==a.weekStartsOn?u:z(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var A=b(n);if(!v(A))throw new RangeError("Invalid time value");var m=dn(A),f=U(A,m),h={firstWeekContainsDate:c,weekStartsOn:l,locale:o,_originalDate:A};return r.match(gn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,cn[e])(n,o.formatLong,h):n})).join("").match(hn).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return vn(t);var i=an[r];if(i)return!a.useAdditionalWeekYearTokens&&mn(t)&&fn(t,e,n),!a.useAdditionalDayOfYearTokens&&An(t)&&fn(t,e,n),i(f,t,o.localize,h);if(r.match(bn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("")}(new Date(n),"PPpp");return e};return f(),{start:f,updateProjectsDiv:n=>{k(c);for(const e of n){const n=document.createElement("div");n.classList.add("project");const t=document.createElement("p");t.textContent=e.title,t.classList.add("name"),t.addEventListener("click",w(e));const r=document.createElement("p");r.textContent=e.priority,r.classList.add("priority"),n.append(t,r),c.appendChild(n)}},closeForm:y,updateTaskForm:n=>{const e=document.querySelector("#project-select"),t=document.querySelector("#project-select-edit");k(e),k(t);for(const r of n){const n=document.createElement("option");n.value=r.title,n.textContent=r.title;const a=n.cloneNode(!0);e.append(n),t.append(a)}},findTask:n=>{for(const e of d.childNodes)if(e.querySelector("h3").textContent===n.title)return e},updateTasksView:w,updateProjectHeader:n=>{m.textContent=n.title,l.classList.remove("hidden"),A.classList.remove("hidden")},deleteProject:n=>{(n=>{for(const e of c.childNodes)e.querySelector(".name").textContent===n.title&&c.removeChild(e)})(n),m.textContent="",l.classList.add("hidden"),A.classList.add("hidden")},deleteTask:n=>{d.removeChild(n)},toggleHiddenDiv:g,toggleEditProjectForm:()=>{g(r)},toggleEditTaskForm:()=>{g(t)},fillEditTaskForm:n=>{for(const e of a){if("button"===e.type)continue;const t=e.name;"project"===e.name?e.value=n[t].title:e.value=n[t]}},fillEditProjectForm:n=>{for(const e of o)"button"!==e.type&&(e.value=n[e.name])},decideIfExpandTask:(n,e)=>{n.querySelector(".description")?(n=>{const e=n.querySelector(".description"),t=n.querySelector(".notes"),r=n.querySelector(".due-date");n.removeChild(e),n.removeChild(t),n.removeChild(r)})(n):((n,e)=>{const t=n.querySelector("h3"),r=e.findTask(t),a=document.createElement("div"),o=document.createElement("h4"),i=document.createElement("p");o.textContent="Description:",i.textContent=r.description;const s=document.createElement("div"),c=document.createElement("h4"),d=document.createElement("p");c.textContent="Notes:",d.textContent=r.notes;const u=document.createElement("div"),l=document.createElement("h4"),A=document.createElement("p");l.textContent="dueDate:",A.textContent=x(r.dueDate),a.classList.add("description"),s.classList.add("notes"),u.classList.add("due-date"),a.append(o,i),s.append(c,d),u.append(l,A),n.append(a,s,u)})(n,e)}}})();function wn(n,e){p(2,arguments);var t=b(n),r=z(e);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function En(n,e){p(2,arguments);var t=b(n),r=z(e);if(isNaN(r))return new Date(NaN);if(!r)return t;var a=t.getDate(),o=new Date(t.getTime());o.setMonth(t.getMonth()+r+1,0);var i=o.getDate();return a>=i?o:(t.setFullYear(o.getFullYear(),o.getMonth(),a),t)}function Bn(n,e){if(p(2,arguments),!e||"object"!=typeof e)return new Date(NaN);var t=e.years?z(e.years):0,r=e.months?z(e.months):0,a=e.weeks?z(e.weeks):0,o=e.days?z(e.days):0,i=e.hours?z(e.hours):0,s=e.minutes?z(e.minutes):0,c=e.seconds?z(e.seconds):0,d=b(n),u=r||t?En(d,r+12*t):d,l=o||a?wn(u,o+7*a):u,A=s+60*i,m=c+60*A,f=1e3*m,h=new Date(l.getTime()+f);return h}((n,e)=>{let t,r;const a=t=>{const r=t.target.classList[0],a=e.getTasksFromDate(r);n.updateProjectHeader({title:r}),n.updateTasksView(a)},o=n=>{n.classList.contains("delete")?u(t):n.classList.contains("edit")&&c()},i=()=>{const e=document.querySelectorAll(".tasks-section > .task > p");for(const r of e)r.addEventListener("click",(e=>{e.preventDefault();const r=e.target.parentNode;e.target.classList.contains("delete")?d(r):e.target.classList.contains("edit")?s(r):e.target.classList.contains("expand")&&n.decideIfExpandTask(r,t)}))},s=e=>{const a=e.querySelector("h3"),o=t.findTask(a);n.toggleEditTaskForm(),n.fillEditTaskForm(o),r=o},c=()=>{n.toggleEditProjectForm(),n.fillEditProjectForm(t)},d=r=>{const a=r.querySelector("h3"),o=t.findTask(a);e.deleteTask(o),n.deleteTask(r)},u=r=>{e.deleteProject(r),n.deleteProject(r),t=null,n.updateProjectsDiv(e.getProjects()),n.updateTasksView(t)},l=e=>{e.addEventListener("click",(e=>{e.preventDefault(),A(e.target),n.closeForm(e.target)}))},A=n=>{const e=n.parentNode.parentNode,t=b(new FormData(e));console.log("data, data");const r=e.parentNode;n.classList.contains("submit-form-btn")?f(r,t):n.classList.contains("edit-form-btn")&&m(r,t)},m=(a,o)=>{a.classList.contains("project-form")?(r=>{for(const[n,e]of Object.entries(r))t[n]=e;n.updateProjectHeader(t),n.updateProjectsDiv(e.getProjects())})(o):a.classList.contains("task-form")&&(a=>{a.project=e.findProject(a.project),r.project.replaceTask(r,a),n.updateTasksView(t),i()})(o)},f=(n,e)=>{n.classList.contains("project-form")?g(e):n.classList.contains("task-form")&&h(e)},h=r=>{const a=e.createTask(r);t.hasTask(a)&&n.updateTasksView(t),i()},g=r=>{const a=e.createProject(r),o=e.getProjects();t=a,n.updateProjectsDiv(o),n.updateTaskForm(o),n.updateProjectHeader(a),p()},p=()=>{const n=document.querySelector(".project-names");for(const e of n.childNodes)e.querySelector("p.name").addEventListener("click",C)},C=r=>{const a=r.target.textContent,o=e.findProject(a);t=o,n.updateProjectHeader(t),n.updateTasksView(t),i()},b=n=>{const e={};for(let[t,r]of n)e[t]=r;return e};(()=>{const n=document.querySelectorAll(".form-btn");for(const e of n)l(e)})(),(()=>{const n=document.querySelector(".project-header").querySelectorAll("p");for(const e of n)e.addEventListener("click",o.bind(void 0,e))})(),(()=>{const n=document.querySelectorAll(".project-dates > p");for(const e of n)e.addEventListener("click",a)})()})(yn,((n,e)=>{const t=[],r=n=>{for(const e of t)if(e.title===n)return e};return{createProject:e=>{const r=n(e.title,e.priority);return(n=>{t.push(n)})(r),r},createTask:n=>{const t=e(n.title,n.description,n.dueDate,n.priority,n.notes,n.project),a=r(t.project);return t.project=a,t.project.addTask(t),t},getProjects:()=>t,findProject:r,deleteProject:n=>{for(let e=0;e<t.length;e++)t[e]===n&&t.splice(e,1)},deleteTask:n=>{n.project.removeTask(n)},getTasksFromDate:n=>{const e=(n=>{const e=new Date(Date.now());let t=e.getDate();return"tomorrow"===n?t=Bn(e,{days:1}).getDate():"week"===n&&(t=Bn(e,{days:7})),t})(n),r=new Date(Date.now()),a={tasks:[]};for(const o of t)for(const t of o.tasks){const o=new Date(t.dueDate);("week"===n&&o>r&&o<=e||o.getDate()===e)&&a.tasks.push(t)}return a}}})(((n,e)=>{const t=[];return{title:n,priority:e,tasks:t,addTask:n=>{t.push(n)},removeTask:n=>{for(let e=0;e<t.length;e++)t[e]===n&&t.splice(e,1)},hasTask:n=>t.includes(n),getTask:n=>t.find(n),findTask:n=>{for(const e of t)if(e.title===n.textContent)return e},replaceTask:(n,e)=>{for(let r=0;r<t.length;r++)t[r]===n&&t.splice(r,1,e)}}}),((n,e,t,r,a,o)=>({title:n,description:e,dueDate:t,priority:r,notes:a,project:o,checked:!1}))))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,